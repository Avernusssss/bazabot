import os
import re
from datetime import datetime, timedelta
from typing import Optional, List, Dict
from aiogram import Bot, Dispatcher, Router, F
from aiogram.types import (
    Message, 
    ReplyKeyboardMarkup, 
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery,
    BufferedInputFile
)
from aiogram.filters import Command, CommandStart
from aiogram.enums import ChatType
from database import Database, Priority
from io import BytesIO
import pandas as pd
from enum import Enum
from cachetools import TTLCache
import logging
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
import asyncio
import sqlite3
from config import BOT_TOKEN, GROUP_CHAT_ID, ADMIN_IDS, DB_PATH

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
os.makedirs('logs', exist_ok=True)
os.makedirs('backup', exist_ok=True)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –†–æ—É—Ç–µ—Ä—ã
admin_router = Router(name='admin_router')
group_router = Router(name='group_router')

# –°—Ä–∞–∑—É –ø–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã –∫ –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É
dp.include_router(admin_router)
dp.include_router(group_router)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database(DB_PATH)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∞–¥–º–∏–Ω–∞
admin_kb = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text="üë• –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏"),
            KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        ],
        [
            KeyboardButton(text="üìë –û—Ç—á–µ—Ç—ã"),
            KeyboardButton(text="üîç –ü–æ–∏—Å–∫")
        ]
    ],
    resize_keyboard=True
)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞ —Å –æ—Ç–ª–∞–¥–∫–æ–π
def is_admin(user_id: int) -> bool:
    return user_id in ADMIN_IDS

def format_mistakes(mistakes, title=""):
    if not mistakes:
        return f"{title}–ö–æ—Å—è–∫–æ–≤ –Ω–µ—Ç"
    response = f"{title}\n"
    for m_id, user, desc, date, closed in mistakes:
        status = "‚úÖ" if closed else "‚ùå"
        response += f"#{m_id} {user} - {desc} ({date}) {status}\n"
    return response

def format_users_stats(stats):
    if not stats:
        return "–°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –Ω–µ—Ç"
    response = "–°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:\n"
    for name, active, closed, total in stats:
        response += f"{name}: –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active or 0}, –ó–∞–∫—Ä—ã—Ç—ã—Ö: {closed or 0}, –í—Å–µ–≥–æ: {total or 0}\n"
    return response

def format_user_detailed_stats(stats, user_name):
    if not stats:
        return f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è {user_name}: –∫–æ—Å—è–∫–æ–≤ –Ω–µ—Ç"
    response = f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è {user_name}:\n"
    for month, active, closed, total in stats:
        response += f"{month}: –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active or 0}, –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö: {closed or 0}, –í—Å–µ–≥–æ: {total or 0}\n"
    return response

async def admin_filter(message: Message) -> bool:
    return is_admin(message.from_user.id)

# –ö—ç—à –¥–ª—è —á–∞—Å—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
mistakes_cache = TTLCache(maxsize=100, ttl=300)  # –ö—ç—à –Ω–∞ 5 –º–∏–Ω—É—Ç
users_cache = TTLCache(maxsize=100, ttl=600)     # –ö—ç—à –Ω–∞ 10 –º–∏–Ω—É—Ç

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ (–ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –±–æ—Ç–æ–º)
async def cmd_start(message: Message):
    if not is_admin(message.from_user.id):
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return
        
    await message.reply(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É—á–µ—Ç–∞ –∫–æ—Å—è–∫–æ–≤.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        reply_markup=admin_kb
    )

async def cmd_add_user(message: Message):
    if not is_admin(message.from_user.id):
        return
        
    args = message.text.split()[1:]
    if len(args) < 2:
        await message.reply(
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n"
            "/add_user –ò–º—è –§–∞–º–∏–ª–∏—è"
        )
        return
        
    user_name = " ".join(args)
    if db.add_user(user_name):
        await message.reply(f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫ {user_name} –¥–æ–±–∞–≤–ª–µ–Ω")
    else:
        await message.reply(f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫ {user_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

async def cmd_del_user(message: Message):
    if not is_admin(message.from_user.id):
        return
        
    try:
        args = message.text.split()[1:]
        if len(args) < 2:
            await message.reply(
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n"
                "/del_user –ò–º—è –§–∞–º–∏–ª–∏—è"
            )
            return
            
        user_name = " ".join(args)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        users = db.get_users()
        if user_name not in users:
            await message.reply(f"‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫ {user_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ü—Ä–æ–±—É–µ–º —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if db.delete_user(user_name):
            await message.reply(f"‚úÖ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ {user_name} —É–¥–∞–ª–µ–Ω")
        else:
            await message.reply(
                f"‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {user_name}\n"
                "–í–æ–∑–º–æ–∂–Ω–æ —É –Ω–µ–≥–æ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ—Å—è–∫–∏"
            )
    except Exception as e:
        await handle_db_error(message, e)

async def find_mistake(message: Message):
    if not is_admin(message.from_user.id):
        return
        
    try:
        mistake_id = int(message.text.split()[1])
        mistake = db.get_mistake(mistake_id)
        if mistake:
            await message.reply(format_mistake_details(mistake))
        else:
            await message.reply(f"‚ùå –ö–æ—Å—è–∫ #{mistake_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except (IndexError, ValueError):
        await message.reply(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
            "/find_mistake ID"
        )

async def find_by_date(message: Message):
    if not is_admin(message.from_user.id):
        return
        
    try:
        date_str = message.text.split()[1]
        mistakes = db.get_mistakes_by_date(date_str)
        if mistakes:
            response = f"–ù–∞–π–¥–µ–Ω–æ –∫–æ—Å—è–∫–æ–≤ –∑–∞ {date_str}:\n\n"
            for mistake in mistakes:
                response += format_mistake_details(mistake) + "\n"
            await message.reply(response)
        else:
            await message.reply(f"–ó–∞ {date_str} –∫–æ—Å—è–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    except (IndexError, ValueError):
        await message.reply(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
            "/find_date YYYY-MM-DD"
        )

# –î–æ–±–∞–≤–ª—è–µ–º inline-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
def get_mistake_inline_keyboard(mistake_id: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚úÖ –ó–∞–∫—Ä—ã—Ç—å",
                    callback_data=f"close_mistake:{mistake_id}"
                ),
                InlineKeyboardButton(
                    text="üí¨ –ö–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å",
                    callback_data=f"comment_mistake:{mistake_id}"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üìù –ò—Å—Ç–æ—Ä–∏—è",
                    callback_data=f"mistake_history:{mistake_id}"
                ),
                InlineKeyboardButton(
                    text="‚≠ê –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç",
                    callback_data=f"change_priority:{mistake_id}"
                )
            ]
        ]
    )

async def safe_reply(message: Message, text: str, **kwargs) -> Optional[Message]:
    try:
        return await message.reply(text, **kwargs)
    except Exception as e:
        print(f"Error sending message: {e}")
        return None

def format_mistake_markdown(mistake) -> str:
    priority_marks = "‚ùó" * mistake['priority']
    status = "‚úÖ" if mistake['closed'] else "‚ùå"
    
    return (
        f"*–ö–æ—Å—è–∫ #{mistake['id']}*\n"
        f"üë§ –°–æ—Ç—Ä—É–¥–Ω–∏–∫: `{mistake['user']}`\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: _{mistake['description']}_\n"
        f"‚≠ê –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority_marks}\n"
        f"üìÖ –î–∞—Ç–∞: `{mistake['date']}`\n"
        f"üìä –°—Ç–∞—Ç—É—Å: {status}\n"
    )

def format_statistics_markdown(stats) -> str:
    return (
        "*–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º:*\n"
        f"‚ùó –û–±—ã—á–Ω—ã–µ: `{stats['medium']}`\n"
        f"‚ùó‚ùó‚ùó –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ: `{stats['high']}`\n\n"
        f"*–í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö:* `{stats['active']}`\n"
        f"*–í—Å–µ–≥–æ –∑–∞–∫—Ä—ã—Ç—ã—Ö:* `{stats['closed']}`"
    )

def format_status_stats(stats) -> str:
    if not stats:
        return "*–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º:*\n–î–∞–Ω–Ω—ã—Ö –Ω–µ—Ç"
        
    response = "*–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º:*\n\n"
    for month, active, closed in stats:
        total = active + closed
        if total == 0:
            continue
        percent_closed = (closed / total) * 100
        response += (
            f"*{month}*\n"
            f"üìä –í—Å–µ–≥–æ: `{total}`\n"
            f"‚ùå –ê–∫—Ç–∏–≤–Ω—ã—Ö: `{active}`\n"
            f"‚úÖ –ó–∞–∫—Ä—ã—Ç—ã—Ö: `{closed}` ({percent_closed:.1f}%)\n\n"
        )
    return response

def format_mistake_details(mistake: Dict) -> str:
    status = "‚úÖ –ó–∞–∫—Ä—ã—Ç" if mistake['closed'] else "‚ùå –ê–∫—Ç–∏–≤–µ–Ω"
    priority = "‚ÄºÔ∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π" if mistake['priority'] == 2 else "‚ùó –û–±—ã—á–Ω—ã–π"
    result = (
        f"#{mistake['id']}\n"
        f"üë§ –°–æ—Ç—Ä—É–¥–Ω–∏–∫: {mistake['user']}\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {mistake['description']}\n"
        f"üîç –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority}\n"
        f"üìÖ –î–∞—Ç–∞: {mistake['date']}\n"
        f"üìä –°—Ç–∞—Ç—É—Å: {status}"
    )
    if mistake['comments']:
        result += f"\nüí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {mistake['comments']}"
    return result

async def process_search_callback(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏", show_alert=True)
        return

    search_type = callback.data.split(':')[1]
    
    if search_type == "by_user":
        users = db.get_users()
        if not users:
            await callback.message.answer("–í –±–∞–∑–µ –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤")
            await callback.answer()
            return
            
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=user, callback_data=f"show_user:{user}")]
                for user in users
            ]
        )
        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:", reply_markup=keyboard)
        
    elif search_type == "by_id":
        await callback.message.answer(
            "–î–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ—Å—è–∫–∞ –ø–æ –Ω–æ–º–µ—Ä—É –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
            "/find_mistake <–Ω–æ–º–µ—Ä>\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: /find_mistake 123"
        )
        
    elif search_type == "by_date":
        await callback.message.answer(
            "–î–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ—Å—è–∫–æ–≤ –ø–æ –¥–∞—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
            "/find_date YYYY-MM-DD\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: /find_date 2024-02-25"
        )

    await callback.answer()

async def process_show_user_callback(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏", show_alert=True)
        return

    user = callback.data.split(':')[1]
    mistakes = db.get_user_mistakes(user)
    
    if not mistakes:
        await callback.message.answer(f"–£ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {user} –Ω–µ—Ç –∫–æ—Å—è–∫–æ–≤")
        await callback.answer()
        return
        
    response = f"–ö–æ—Å—è–∫–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {user}:\n\n"
    for mistake in mistakes:
        response += format_mistake_details(mistake) + "\n"
    
    await callback.message.answer(response)
    await callback.answer()

async def process_stats_type(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏", show_alert=True)
        return

    stats_type = callback.data.split(':')[1]
    
    if stats_type == "users":
        stats = db.get_users_stats()
        if not stats:
            await callback.message.edit_text(
                "*–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º:*\n–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
                parse_mode="Markdown"
            )
            await callback.answer()
            return
            
        response = "*–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º:*\n\n"
        for user, active, closed, total in stats:
            response += f"*{user}*:\n"
            response += f"–í—Å–µ–≥–æ –∫–æ—Å—è–∫–æ–≤: `{total or 0}`\n"
            response += f"–ê–∫—Ç–∏–≤–Ω—ã—Ö: `{active or 0}`\n"
            response += f"–ó–∞–∫—Ä—ã—Ç—ã—Ö: `{closed or 0}`\n\n"
    
    elif stats_type == "priority":
        stats = db.get_priority_stats()
        response = "*–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º:*\n\n"
        response += f"‚ùó –û–±—ã—á–Ω—ã–µ: `{stats['–û–±—ã—á–Ω—ã–π']}`\n"
        response += f"‚ÄºÔ∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ: `{stats['–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π']}`\n"
    
    elif stats_type == "status":
        stats = db.get_status_stats()
        response = "*–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º:*\n\n"
        response += f"–ê–∫—Ç–∏–≤–Ω—ã—Ö: `{stats['active']}`\n"
        response += f"–ó–∞–∫—Ä—ã—Ç—ã—Ö: `{stats['closed']}`\n"
        response += f"–í—Å–µ–≥–æ: `{stats['total']}`\n"

    await callback.message.edit_text(
        response,
        parse_mode="Markdown"
    )
    await callback.answer()

async def process_report(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏", show_alert=True)
        return
        
    period = callback.data.split(':')[1]
    
    if period == 'week':
        days = 7
        title = "–∑–∞ –Ω–µ–¥–µ–ª—é"
    elif period == 'month':
        days = 30
        title = "–∑–∞ –º–µ—Å—è—Ü"
    else:
        days = None
        title = "–∑–∞ –≤—Å–µ –≤—Ä–µ–º—è"
    
    stats = db.get_period_stats(days) if days else db.get_all_stats()
    
    response = f"*–û—Ç—á–µ—Ç {title}:*\n\n"
    response += f"–í—Å–µ–≥–æ –∫–æ—Å—è–∫–æ–≤: `{stats['total']}`\n"
    response += f"–ê–∫—Ç–∏–≤–Ω—ã—Ö: `{stats['active']}`\n"
    response += f"–ó–∞–∫—Ä—ã—Ç—ã—Ö: `{stats['closed']}`\n\n"
    
    response += "*–ü–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º:*\n"
    response += f"‚ùó –û–±—ã—á–Ω—ã–µ: `{stats['priority_1']}`\n"
    response += f"‚ÄºÔ∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ: `{stats['priority_2']}`\n"
    
    response += "*–ê–Ω—Ç–∏-—Ç–æ–ø —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:*\n"
    for i, (user, count) in enumerate(stats['top_users'], 1):
        medal = ["ü•á", "ü•à", "ü•â"][i-1] if i <= 3 else "üëé"
        response += f"{medal} {user}: `{count}` –∫–æ—Å—è–∫–æ–≤\n"
    
    await callback.message.edit_text(
        response,
        parse_mode="Markdown"
    )
    await callback.answer()

async def cmd_clear_stats(message: Message):
    if not is_admin(message.from_user.id):
        return
        
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –î–∞, –æ—á–∏—Å—Ç–∏—Ç—å", callback_data="clear_stats:confirm"),
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="clear_stats:cancel")
            ]
        ]
    )
    
    await message.reply(
        "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ—Å—è–∫–æ–≤?\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!\n"
        "–°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.",
        reply_markup=keyboard
    )

@admin_router.callback_query(F.data.startswith('clear_stats:'))
async def process_clear_stats(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏", show_alert=True)
        return

    action = callback.data.split(':')[1]
    
    if action == "confirm":
        if db.clear_mistakes():
            await callback.message.edit_text("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ—Å—è–∫–æ–≤ –æ—á–∏—â–µ–Ω–∞")
        else:
            await callback.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    else:
        await callback.message.edit_text("‚ùå –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞")
    
    await callback.answer()

async def on_startup():
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    logger.info("Bot starting...")
    logger.info("Bot started successfully")

async def on_shutdown():
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞"""
    logger.info("Bot stopping...")
    await bot.session.close()
    db.conn.close()
    logger.info("Bot stopped successfully")

async def main():
    logger.info("Starting bot...")
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö—ç–Ω–¥–ª–µ—Ä—ã –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
    admin_router.message.register(cmd_start, Command("start"))
    admin_router.message.register(cmd_add_user, Command("add_user"))
    admin_router.message.register(cmd_del_user, Command("del_user"))
    admin_router.message.register(show_users_menu, F.text.in_(["üë• –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏", "–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏"]))
    admin_router.message.register(show_statistics_menu, F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    admin_router.message.register(show_reports_menu, F.text == "üìë –û—Ç—á–µ—Ç—ã")
    admin_router.message.register(show_search_menu, F.text.in_(["üîç –ü–æ–∏—Å–∫", "–ü–æ–∏—Å–∫"]))
    admin_router.message.register(find_mistake, Command("find_mistake"))
    admin_router.message.register(find_by_date, Command("find_date"))
    admin_router.message.register(cmd_clear_stats, Command("clear_stats"))
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
    admin_router.callback_query.register(process_search_callback, F.data.startswith('search:'))
    admin_router.callback_query.register(process_show_user_callback, F.data.startswith('show_user:'))
    admin_router.callback_query.register(process_stats_type, F.data.startswith('stats_type:'))
    admin_router.callback_query.register(process_report, F.data.startswith('report:'))
    admin_router.callback_query.register(process_clear_stats, F.data.startswith('clear_stats:'))
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞
    group_router.message.register(group_handler, F.chat.id == GROUP_CHAT_ID)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    try:
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"Error while polling: {e}")

# –§—É–Ω–∫—Ü–∏–∏-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–µ–Ω—é
async def show_users_menu(message: Message):
    if not is_admin(message.from_user.id):
        return
    
    users = db.get_users()
    if not users:
        await message.reply(
            "üìù –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.\n\n"
            "–î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: /add_user –ò–º—è –§–∞–º–∏–ª–∏—è"
        )
        return
    
    response = "*–°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:*\n\n"
    for user in users:
        response += f"üë§ {user}\n"
    
    await message.reply(response, parse_mode="Markdown")

async def show_statistics_menu(message: Message):
    if not is_admin(message.from_user.id):
        return
        
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º", callback_data="stats_type:users")],
            [InlineKeyboardButton(text="–ü–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º", callback_data="stats_type:priority")],
            [InlineKeyboardButton(text="–ü–æ —Å—Ç–∞—Ç—É—Å–∞–º", callback_data="stats_type:status")]
        ]
    )
    
    await message.reply("üìä –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", reply_markup=keyboard)

async def show_reports_menu(message: Message):
    if not is_admin(message.from_user.id):
        return
        
    if not db.has_any_data():
        await message.reply("üìë –û—Ç—á–µ—Ç—ã –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã - –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        return
        
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ó–∞ –Ω–µ–¥–µ–ª—é", callback_data="report:week")],
            [InlineKeyboardButton(text="–ó–∞ –º–µ—Å—è—Ü", callback_data="report:month")],
            [InlineKeyboardButton(text="–ó–∞ –≤—Å–µ –≤—Ä–µ–º—è", callback_data="report:all")]
        ]
    )
    
    await message.reply("üìë –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –æ—Ç—á–µ—Ç–∞:", reply_markup=keyboard)

async def show_search_menu(message: Message):
    if not is_admin(message.from_user.id):
        return
        
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É", callback_data="search:by_user")],
            [InlineKeyboardButton(text="–ü–æ –Ω–æ–º–µ—Ä—É –∫–æ—Å—è–∫–∞", callback_data="search:by_id")],
            [InlineKeyboardButton(text="–ü–æ –¥–∞—Ç–µ", callback_data="search:by_date")]
        ]
    )
    
    await message.reply("üîç –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞
async def group_handler(message: Message):
    if not message.text:
        return
        
    if not is_admin(message.from_user.id):
        return

    text = message.text.strip()
    logger.info(f"Group message received: {text}")
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ—Å—è–∫–∞
    if text.startswith('+1 –∫–æ—Å—è–∫'):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –ª–∏ —ç—Ç–æ –∫–æ—Å—è–∫
        if '!!!' in text:
            match = re.match(r'\+1 –∫–æ—Å—è–∫\s+!!!\s+([–ê-–Ø–∞-—è]+\s+[–ê-–Ø–∞-—è]+)\s*-\s*(.+)', text)
            priority = 2  # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π
        else:
            match = re.match(r'\+1 –∫–æ—Å—è–∫\s+([–ê-–Ø–∞-—è]+\s+[–ê-–Ø–∞-—è]+)\s*-\s*(.+)', text)
            priority = 1  # –û–±—ã—á–Ω—ã–π
            
        if not match:
            await message.reply(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                "–û–±—ã—á–Ω—ã–π –∫–æ—Å—è–∫: +1 –∫–æ—Å—è–∫ –ò–º—è –§–∞–º–∏–ª–∏—è - –æ–ø–∏—Å–∞–Ω–∏–µ\n"
                "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –∫–æ—Å—è–∫: +1 –∫–æ—Å—è–∫ !!! –ò–º—è –§–∞–º–∏–ª–∏—è - –æ–ø–∏—Å–∞–Ω–∏–µ"
            )
            return
            
        user = match.group(1)
        desc = match.group(2)
        
        if user not in db.get_users():
            users = db.get_users()
            await message.reply(
                f"‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫ {user} –Ω–µ –Ω–∞–π–¥–µ–Ω.\n"
                f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏:\n" + "\n".join(f"‚Ä¢ {u}" for u in users)
            )
            return
            
        mistake_id = db.add_mistake(user, desc, priority)
        if mistake_id:
            priority_text = "–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π" if priority == 2 else "–æ–±—ã—á–Ω—ã–π"
            priority_emoji = "‚ÄºÔ∏è" if priority == 2 else "‚ùó"
            await message.reply(
                f"{priority_emoji} –ö–æ—Å—è–∫ #{mistake_id} –¥–æ–±–∞–≤–ª–µ–Ω\n"
                f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫: {user}\n"
                f"–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority_text}\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {desc}"
            )
        else:
            await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ—Å—è–∫–∞")
    
    # –ó–∞–∫—Ä—ã—Ç–∏–µ –∫–æ—Å—è–∫–∞
    elif text.startswith('-1 –∫–æ—Å—è–∫'):
        match = re.match(r'-1 –∫–æ—Å—è–∫\s+#(\d+)(?:\s*-\s*(.+))?', text)
        if not match:
            await message.reply(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                "-1 –∫–æ—Å—è–∫ #ID\n"
                "–∏–ª–∏\n"
                "-1 –∫–æ—Å—è–∫ #ID - –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"
            )
            return
            
        mistake_id = int(match.group(1))
        comment = match.group(2)
        
        if not db.mistake_exists(mistake_id):
            await message.reply(f"‚ùå –ö–æ—Å—è–∫ #{mistake_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        if db.close_mistake(mistake_id):
            response = f"‚úÖ –ö–æ—Å—è–∫ #{mistake_id} –∑–∞–∫—Ä—ã—Ç"
            if comment:
                db.add_comment(mistake_id, message.from_user.id, comment)
                response += f"\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}"
            await message.reply(response)
        else:
            await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –∫–æ—Å—è–∫–∞ #{mistake_id}")

async def handle_db_error(message: Message, error: Exception):
    error_msg = f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {str(error)}"
    logger.error(error_msg)
    await message.reply(
        "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    )

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("Bot stopped by user")
    except Exception as e:
        logger.error(f"Bot crashed: {e}")